<%-
	model = self.resource_class.to_s.underscore.downcase
	model_plural = self.resource_class.to_s.pluralize.underscore.downcase
%>
<ul>
  <%- if !is_selection_mode? %>
		<%- if (self.controller.respond_to? :new) && (can? :create, resource_class) -%>
			<li class="muscat_icon_link">
				<%= link_to("#{I18n.t :new}", send("new_admin_#{model}_path"),
					:class => "muscat_icon_link muscat_icon_link_new") %>
			</li>
		<%else %>
			<li><%= (I18n.t :no_action) -%></li>
		<%- end %>
		<%- if (self.resource_class.method_defined? :migrate_to_id) && (can? :destroy, resource_class) -%>
      <li class="muscat_icon_link">
        <%= content_tag("a", "#{I18n.t :merge}", :class => "muscat_icon_link muscat_icon_link_duplicate muscat_merge",  style: "cursor: pointer") %>
			</li>
		<%- end %>

		<%- if respond_to?("create_new_folder_admin_#{model_plural}_path".to_sym) && params.include?(:q) %>
			<li class="muscat_icon_separator"></li>
			<li class="muscat_icon_link">
			<!-- Create the link to the function, pass the params fo q is preserved -->
			<%= link_to("#{I18n.t :create_folder}", send("create_new_folder_admin_#{model_plural}_path", params.permit!.except(:action, :controller)),
				:class => "muscat_icon_link muscat_icon_link_new_folder") %>
			</li>
			
			<li class="muscat_icon_link">
			<!-- Create the link to the function, pass the params fo q is preserved -->
			<%= link_to("#{I18n.t :append_folder}", send("append_to_folder_admin_#{model_plural}_path", params.permit!.except(:action, :controller)),
				:class => "muscat_icon_link muscat_icon_link_append_folder") %>
			</li>
			
		<%- end %>
		
	<%- else %>
	
		<li class="muscat_icon_link">
			<%= link_to("#{I18n.t :cancel}", "#",
				:class => "muscat_icon_link muscat_icon_link_cancel", :data => { :marc_editor_cancel => "cancel"}) %>
		</li>
		
	<%- end %>

		<li class="muscat_icon_link">
			<%= link_to("Copy", "#", :class => "muscat_icon_link muscat_icon_link_cancel copy_to_clipboard", 
				:data => {"clipboard-target": "#index_table_sources"}) %>
		</li>

	<script>
		var clipboard = new ClipboardJS('.copy_to_clipboard');
		clipboard.on('success', function(e) {
  console.info('Action:', e.action);
  console.info('Text:', e.text);
  console.info('Trigger:', e.trigger);

  e.clearSelection();
});

clipboard.on('error', function(e) {
  console.error('Action:', e.action);
  console.error('Trigger:', e.trigger);
});
	</script>
</ul>
